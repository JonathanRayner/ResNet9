* Background
https://myrtle.ai/how-to-train-your-resnet-1-baseline/
https://github.com/davidcpage/cifar10-fast

Current best on dawn: https://dawn.cs.stanford.edu/benchmark/#cifar10-train-time

[[net_diagram.svg]]

Some network specifics here: https://github.com/davidcpage/cifar10-fast/blob/master/demo.ipynb

* Import modules, data

#+BEGIN_SRC emacs-lisp
;; activate virtual environment so we can use jupyter
(pyvenv-activate "~/.pyenv/versions/tensorflow_env")
#+END_SRC

#+RESULTS:

#+BEGIN_SRC jupyter-python :session j
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

print("TensorFlow executing eagerly: {}".format(tf.executing_eagerly()))
#+END_SRC

#+RESULTS:
: TensorFlow executing eagerly: True

Import cifar10

#+BEGIN_SRC jupyter-python :session j
cifar = tf.keras.datasets.cifar10
(train_images, train_labels), (test_images, test_labels) = cifar.load_data()
cifar_labels = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

# Take the last 10000 images from the training set to form a validation set
train_labels = train_labels.squeeze()
validation_images = train_images[-10000:, :, :]
validation_labels = train_labels[-10000:]
train_images = train_images[:-10000, :, :]
train_labels = train_labels[:-10000]

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid('off')
    img_index = np.random.randint(0, 40000)
    plt.imshow(train_images[img_index])
    plt.xlabel(cifar_labels[train_labels[img_index]])
#+END_SRC

#+RESULTS:
[[file:./.ob-jupyter/624a8b3db365ea1e49c968e98a3ed498f4e4bc0f.png]]

Build some blocks for the ResNet

#+BEGIN_SRC jupyter-python :session j
class Conv2DBatchNormReLU(tf.keras.layers.Layer):
    """
    Creates a layer of the form:

    Convolutional layer 2D -> Batch Norm -> ReLU

    Conv layer uses He Uniform weight initialization.

Arguments:
    filters (int): number of filters used convolutions, and gives num channels of output tensor
    kernel_size (int or tuple of 2 integers): window size used in convolutions

Output shape:
    (batch_size, rows, cols, filters)

Returns:
    A tensor of rank 4
    """

    def __init__(self, filters, kernel_size=3, **kwargs):
        super().__init__(**kwargs)
        self.filters = filters
        self.kernel_size = kernel_size

    def build(self, input_shape):
        self.conv2d = tf.keras.layers.Conv2D(filters=self.filters,
                                             kernel_size=self.kernel_size,
                                             padding='SAME',
                                             kernel_initializer=tf.keras.initializers.he_uniform(),
                                             input_shape=input_shape)
        self.batch_norm = tf.keras.layers.BatchNormalization()
        self.relu = tf.keras.layers.ReLU()

    def call(self, input_tensor, training=False):
        x = self.conv2d(input_tensor)
        # Batch Norm disabled during inference
        x = self.batch_norm(x, training=training)
        x = self.relu(x)
        return x

class ResNet9Block(tf.keras.layers.Layer):
    """
    Creates a Residual Block of type used in the network in https://github.com/davidcpage/cifar10-fast (see demo.ipynbwhich details the structure). Structure:

    Let CBR = Convolutional layer 2D -> Batch Norm -> ReLU
    Let x = CBR -> Pooling Layer (factor of 2)

    Then the structure is (x -> CBR -> CBR) + x

    Arguments:
        filters (int): number of filters used in all convolutions, and gives num channels of output tensor
        kernel_size (int or tuple of 2 integers): window size used in all convolutions

    Output shape:
        (batch_size, rows/2, cols/2, filters)

    Returns:
        A tensor of rank 4
    """

    def __init_(self, filters, kernel_size=3, **kwargs):
        super().__init__(**kwargs)
        self.filters = filters
        self.kernel_size = kernel_size

    def build(self, input_shape):
        self.conv_bn_relu_1 = Conv2DBatchNormReLU(filters=self.filters, kernel_size=self.kernel_size)
        self.conv_bn_relu_2 = Conv2DBatchNormReLU(filters=self.filters, kernel_size=self.kernel_size)
        self.conv_bn_relu_3 = Conv2DBatchNormReLU(filters=self.filters, kernel_size=self.kernel_size)
        self.max_pool2d = tf.keras.layers.MaxPool2D()

    def call(self, input_tensor):
        """
        Residual behaviour implemented here.
        """
        x = self.conv_bn_relu_1(input_tensor)
        x = self.max_pool2d(x)
        y = self.conv_bn_relu_2(x)
        y = self.conv_bn_relu_3(y)
        x = x + y
        return x
#+END_SRC

#+RESULTS:

Build the model (structure, sizes of filters, convolutional kernels, pooling sizes can be found at https://github.com/davidcpage/cifar10-fast/blob/master/demo.ipynb)

#+BEGIN_SRC jupyter-python :session j
# All convolutions use (3,3) window size by default
model = tf.keras.models.Sequential([
    Conv2DBatchNormReLU(filters=64, input_shape=(32,32,3)),
    ResNet9Block(filters=128),
    Conv2DBatchNormReLU(filters=256),
    tf.keras.layers.MaxPool2D(2),
    ResNet9Block(filters=512),
    tf.keras.layers.MaxPool2D(4),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(10, use_bias=False)
])

model.summary()

# visualize
tf.keras.utils.plot_model(
    model, to_file='model.png', show_shapes=True, show_layer_names=True,
    rankdir='LR', expand_nested=True
)
#+END_SRC

#+RESULTS:
:RESULTS:
# [goto error]
#+begin_example

TypeErrorTraceback (most recent call last)
<ipython-input-13-873140765ed5> in <module>
      2 model = tf.keras.models.Sequential([
      3     Conv2DBatchNormReLU(filters=64, input_shape=(32,32,3)),
----> 4     ResNet9Block(filters=128),
      5     Conv2DBatchNormReLU(filters=256),
      6     tf.keras.layers.MaxPool2D(2),

~/.pyenv/versions/tensorflow_env/lib/python3.8/site-packages/tensorflow/python/training/tracking/base.py in _method_wrapper(self, *args, **kwargs)
    454     self._self_setattr_tracking = False  # pylint: disable=protected-access
    455     try:
--> 456       result = method(self, *args, **kwargs)
    457     finally:
    458       self._self_setattr_tracking = previous_value  # pylint: disable=protected-access

~/.pyenv/versions/tensorflow_env/lib/python3.8/site-packages/tensorflow/python/keras/engine/base_layer.py in __init__(self, trainable, name, dtype, dynamic, **kwargs)
    292     }
    293     # Validate optional keyword arguments.
--> 294     generic_utils.validate_kwargs(kwargs, allowed_kwargs)
    295 
    296     # Mutable properties

~/.pyenv/versions/tensorflow_env/lib/python3.8/site-packages/tensorflow/python/keras/utils/generic_utils.py in validate_kwargs(kwargs, allowed_kwargs, error_message)
    790   for kwarg in kwargs:
    791     if kwarg not in allowed_kwargs:
--> 792       raise TypeError(error_message, kwarg)
    793 
    794 

TypeError: ('Keyword argument not understood:', 'filters')
#+end_example
:END:

